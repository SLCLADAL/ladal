{
  "hash": "e14261ec40c724b54c442a75873662d5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Regular Expressions in R\"\nauthor: \"Martin Schweinberger\"\n---\n\n\n\n![](/images/uq1.jpg){ width=100% }\n\n\n# Introduction\n\nThis tutorial introduces regular expressions and how they can be used when working with language data. Regular expressions are powerful tools used to search and manipulate text patterns. They provide a way to find specific sequences of characters within larger bodies of text. Think of them as search patterns on steroids. Regular expressions are useful for tasks like extracting specific words, finding patterns, or replacing text in bulk. They offer a concise and flexible way to describe complex text patterns using symbols and special characters. Regular expressions have applications in linguistics and humanities research, aiding in tasks such as text analysis, corpus linguistics, and language processing. Understanding regular expressions can unlock new possibilities for exploring and analyzing textual data.\n\n\n![](/images/gy_chili.png){ width=15% style=\"float:right; padding:10px\" }\n\nThis tutorial is aimed at beginners and intermediate users of R with the aim of showcasing how to use regular expression (or wild cards) in R. The aim is not to provide a fully-fledged analysis but rather to show and exemplify selected useful functions and methods associated with regular expressions. \n\n\n\n<div class=\"warning\" style='padding:0.1em; background-color:#f2f2f2; color:#51247a'>\n<span>\n<p style='margin-top:1em; text-align:center'>\nTo be able to follow this tutorial, we suggest you check out and familiarize yourself with the content of the following **R Basics** tutorials:<br>\n</p>\n<p style='margin-top:1em; text-align:left'>\n<ul>\n  <li>[Getting started with R](https://ladal.edu.au/intror.html) </li>\n  <li>[Loading, saving, and generating data in R](https://ladal.edu.au/load.html) </li>\n  <li>[String Processing in R](https://ladal.edu.au/string.html) </li>\n</ul>\n</p>\n<p style='margin-top:1em; text-align:center'>\nClick [**here**](https://ladal.edu.au/content/regex.Rmd)^[If you want to render the R Notebook on your machine, i.e. knitting the document to html or a pdf, you need to make sure that you have R and RStudio installed and you also need to download the [**bibliography file**](https://slcladal.github.io/content/bibliography.bib) and store it in the same folder where you store the Rmd file.] to download the **entire R Notebook** for this tutorial.<br><br>\n[![Binder](https://mybinder.org/badge_logo.svg)](https://binderhub.atap-binder.cloud.edu.au/v2/gh/SLCLADAL/interactive-notebooks-environment/main?urlpath=git-pull%3Frepo%3Dhttps%253A%252F%252Fgithub.com%252FSLCLADAL%252Finteractive-notebooks%26urlpath%3Dlab%252Ftree%252Finteractive-notebooks%252Fnotebooks%252Fregex_cb.ipynb%26branch%3Dmain)<br>\nClick [**here**](https://binderhub.atap-binder.cloud.edu.au/v2/gh/SLCLADAL/interactive-notebooks-environment/main?urlpath=git-pull%3Frepo%3Dhttps%253A%252F%252Fgithub.com%252FSLCLADAL%252Finteractive-notebooks%26urlpath%3Dlab%252Ftree%252Finteractive-notebooks%252Fnotebooks%252Fregex_cb.ipynb%26branch%3Dmain) to open an interactive Jupyter notebook that allows you to execute, change, and edit the code as well as to upload your own data. <br>\n</p>\n<p style='margin-left:1em;'>\n</p></span>\n</div>\n\n<br>\n\nHow can you search texts for complex patterns or combinations of patterns? This question will answered in this tutorial and at the end you will be able to perform very complex searches yourself. The key concept of this tutorial is that of a regular expression. A regular expression (in short also called *regex* or *regexp*) is a special sequence of characters (or string) for describing a search pattern. You can think of regular expressions as very powerful combinations of wildcards or as wildcards on steroids. \n\nIf you would like to get deeper into regular expressions, I can recommend @friedl2006mastering and, in particular, chapter 17 of @peng2016r for further study (although the latter uses base R rather than tidyverse functions, but this does not affect the utility of the discussion of regular expressions in any major or meaningful manner). Also, [here](https://rstudio.com/wp-content/uploads/2016/09/RegExCheatsheet.pdf) is a so-called *cheatsheet* about regular expressions written by  Ian Kopacka and provided by RStudio. Nick Thieberger has also recorded a very nice [*Introduction to Regular Expressions*](https://www.youtube.com/watch?v=8ILToE0CNpM) for humanities scholars to YouTube.\n\n**Preparation and session set up**\n\nThis tutorial is based on R. If you have not installed R or are new to it, you will find an introduction to and more information how to use R [here](https://slcladal.github.io/intror.html). For this tutorials, we need to install certain *packages* from an R *library* so that the scripts shown below are executed without errors. Before turning to the code below, please install the packages by running the code below this paragraph. If you have already installed the packages mentioned below, then you can skip ahead and ignore this section. To install the necessary packages, simply run the following code - it may take some time (between 1 and 5 minutes to install all of the libraries so you do not need to worry if it takes some time).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set options\noptions(stringsAsFactors = F) # no automatic data transformation\noptions(\"scipen\" = 100, \"digits\" = 4) # suppress math annotation\n# install packages\ninstall.packages(\"tidyverse\")\ninstall.packages(\"flextable\")\ninstall.packages(\"htmlwidgets\")\n# install klippy for copy-to-clipboard button in code chunks\ninstall.packages(\"remotes\")\nremotes::install_github(\"rlesur/klippy\")\n```\n:::\n\n\n\nIn a next step, we load the packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(flextable)\n# activate klippy for copy-to-clipboard button\nklippy::klippy()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<script>\n  addClassKlippyTo(\"pre.r, pre.markdown\");\n  addKlippy('left', 'top', 'auto', '1', 'Copy code', 'Copied!');\n</script>\n```\n\n:::\n:::\n\n\n\nOnce you have installed RStudio and have initiated the session by executing the code shown above, you are good to go.\n\n# Getting started with Regular Expressions\n\nTo put regular expressions into practice, we need some text that we will perform out searches on. In this tutorial, we will use texts from wikipedia about grammar.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in first text\ntext1 <- readLines(\"https://slcladal.github.io/data/testcorpus/linguistics02.txt\")\net <- paste(text1, sep = \" \", collapse = \" \")\n# inspect example text\net\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Grammar is a system of rules which governs the production and use of utterances in a given language. These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"\n```\n\n\n:::\n:::\n\n\n\nIn addition, we will split the example text into words to have another resource we can use to understand regular expressions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# split example text\nset <- str_split(et, \" \") %>%\n    unlist()\n# inspect\nhead(set)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Grammar\" \"is\"      \"a\"       \"system\"  \"of\"      \"rules\"  \n```\n\n\n:::\n:::\n\n\n\nBefore we delve into using regular expressions, we will have a look at the regular expressions that can be used in R and also check what they stand for.\n\nThere are three basic types of regular expressions:\n\n* regular expressions that stand for individual symbols and determine frequencies\n\n* regular expressions that stand for classes of symbols\n\n* regular expressions that stand for structural properties\n\nThe regular expressions below show the first type of regular expressions, i.e. regular expressions that stand for individual symbols and determine frequencies.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-3e2bc6ae{table-layout:auto;width:95%;}.cl-3e26b344{font-family:'Helvetica';font-size:12pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3e26b34e{font-family:'Helvetica';font-size:12pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3e29785e{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3e298ae2{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e298ae3{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e298ae4{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e298ae5{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e298ae6{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e298aec{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e298aed{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e298aee{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e298aef{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e298af0{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e298af6{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e298af7{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-3e2bc6ae'><thead><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-3e298ae2\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b344\">RegEx Symbol/Sequence</span></p></th><th class=\"cl-3e298ae3\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b344\">Explanation</span></p></th><th class=\"cl-3e298ae4\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b344\">Example</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e298ae5\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">?</span></p></td><td class=\"cl-3e298ae6\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">The preceding item is optional and will be matched at most once</span></p></td><td class=\"cl-3e298aec\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">walk[a-z]? = walk, walks</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e298aed\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">*</span></p></td><td class=\"cl-3e298aee\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">The preceding item will be matched zero or more times</span></p></td><td class=\"cl-3e298aef\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">walk[a-z]* = walk, walks, walked, walking</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e298ae5\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">+</span></p></td><td class=\"cl-3e298ae6\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">The preceding item will be matched one or more times</span></p></td><td class=\"cl-3e298aec\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">walk[a-z]+ = walks, walked, walking</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e298aed\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">{n}</span></p></td><td class=\"cl-3e298aee\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">The preceding item is matched exactly n times</span></p></td><td class=\"cl-3e298aef\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">walk[a-z]{2} = walked</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e298ae5\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">{n,}</span></p></td><td class=\"cl-3e298ae6\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">The preceding item is matched n or more times</span></p></td><td class=\"cl-3e298aec\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">walk[a-z]{2,} = walked, walking</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e298af0\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">{n,m}</span></p></td><td class=\"cl-3e298af6\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">The preceding item is matched at least n times, but not more than m times</span></p></td><td class=\"cl-3e298af7\"><p class=\"cl-3e29785e\"><span class=\"cl-3e26b34e\">walk[a-z]{2,3} = walked, walking</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\nThe regular expressions below show the second type of regular expressions, i.e. regular expressions that stand for classes of symbols.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-3e3eb98a{table-layout:auto;width:95%;}.cl-3e3a526e{font-family:'Helvetica';font-size:12pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3e3a5278{font-family:'Helvetica';font-size:12pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3e3ba524{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3e3bb334{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e3bb33e{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e3bb33f{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e3bb348{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e3bb349{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e3bb34a{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e3bb34b{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e3bb352{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-3e3eb98a'><thead><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-3e3bb334\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a526e\">RegEx Symbol/Sequence</span></p></th><th class=\"cl-3e3bb33e\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a526e\">Explanation</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb33f\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[ab]</span></p></td><td class=\"cl-3e3bb348\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">lower case a and b</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb349\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[a-z]</span></p></td><td class=\"cl-3e3bb34a\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">all lower case characters from a to z</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb33f\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[AB]</span></p></td><td class=\"cl-3e3bb348\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">upper case a and b</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb349\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[A-Z]</span></p></td><td class=\"cl-3e3bb34a\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">all upper case characters from A to Z</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb33f\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[12]</span></p></td><td class=\"cl-3e3bb348\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">digits 1 and 2</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb349\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[0-9]</span></p></td><td class=\"cl-3e3bb34a\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">digits: 0 1 2 3 4 5 6 7 8 9</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb33f\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[:digit:]</span></p></td><td class=\"cl-3e3bb348\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">digits: 0 1 2 3 4 5 6 7 8 9</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb349\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[:lower:]</span></p></td><td class=\"cl-3e3bb34a\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">lower case characters: a–z</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb33f\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[:upper:]</span></p></td><td class=\"cl-3e3bb348\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">upper case characters: A–Z</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb349\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[:alpha:]</span></p></td><td class=\"cl-3e3bb34a\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">alphabetic characters: a–z and A–Z</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb33f\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[:alnum:]</span></p></td><td class=\"cl-3e3bb348\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">digits and alphabetic characters</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb349\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[:punct:]</span></p></td><td class=\"cl-3e3bb34a\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">punctuation characters: . , ; etc.</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb33f\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[:graph:]</span></p></td><td class=\"cl-3e3bb348\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">graphical characters: [:alnum:] and [:punct:]</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb349\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[:blank:]</span></p></td><td class=\"cl-3e3bb34a\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">blank characters: Space and tab</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e3bb34b\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">[:space:]</span></p></td><td class=\"cl-3e3bb352\"><p class=\"cl-3e3ba524\"><span class=\"cl-3e3a5278\">space characters: Space, tab, newline, and other space characters</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\nThe regular expressions that denote classes of symbols are enclosed in `[]` and `:`. The last type of regular expressions, i.e. regular expressions that stand for structural properties are shown below.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-3e48b638{table-layout:auto;width:95%;}.cl-3e455bd2{font-family:'Helvetica';font-size:12pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3e455bdc{font-family:'Helvetica';font-size:12pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3e46891c{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3e469592{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e469593{background-color:rgba(207, 207, 207, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e46959c{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e46959d{background-color:rgba(239, 239, 239, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e46959e{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e4695a6{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e4695a7{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 1pt solid rgba(102, 102, 102, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e4695a8{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(102, 102, 102, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-3e48b638'><thead><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-3e469592\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bd2\">RegEx Symbol/Sequence</span></p></th><th class=\"cl-3e469593\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bd2\">Explanation</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e46959c\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">\\\\w</span></p></td><td class=\"cl-3e46959d\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">Word characters: [[:alnum:]_]</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e46959e\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">\\\\W</span></p></td><td class=\"cl-3e4695a6\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">No word characters: [^[:alnum:]_]</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e46959c\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">\\\\s</span></p></td><td class=\"cl-3e46959d\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">Space characters: [[:blank:]]</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e46959e\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">\\\\S</span></p></td><td class=\"cl-3e4695a6\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">No space characters: [^[:blank:]]</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e46959c\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">\\\\d</span></p></td><td class=\"cl-3e46959d\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">Digits: [[:digit:]]</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e46959e\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">\\\\D</span></p></td><td class=\"cl-3e4695a6\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">No digits: [^[:digit:]]</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e46959c\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">\\\\b</span></p></td><td class=\"cl-3e46959d\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">Word edge</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e46959e\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">\\\\B</span></p></td><td class=\"cl-3e4695a6\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">No word edge</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e46959c\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">&lt;</span></p></td><td class=\"cl-3e46959d\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">Word beginning</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e46959e\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">&gt;</span></p></td><td class=\"cl-3e4695a6\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">Word end</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e46959c\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">^</span></p></td><td class=\"cl-3e46959d\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">Beginning of a string</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-3e4695a7\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">$</span></p></td><td class=\"cl-3e4695a8\"><p class=\"cl-3e46891c\"><span class=\"cl-3e455bdc\">End of a string</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n# Practice\n\nIn this section, we will explore how to use regular expressions. At the end, we will go through some exercises to help you understand how you can best utilize regular expressions.\n\nShow all words in the split example text that contain `a` or `n`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset[str_detect(set, \"[an]\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Grammar\"      \"a\"            \"governs\"      \"production\"   \"and\"         \n [6] \"utterances\"   \"in\"           \"a\"            \"given\"        \"language.\"   \n[11] \"apply\"        \"sound\"        \"as\"           \"as\"           \"meaning,\"    \n[16] \"and\"          \"include\"      \"componential\" \"as\"           \"pertaining\"  \n[21] \"phonology\"    \"organisation\" \"phonetic\"     \"sound\"        \"formation\"   \n[26] \"and\"          \"composition\"  \"and\"          \"syntax\"       \"formation\"   \n[31] \"and\"          \"composition\"  \"phrases\"      \"and\"          \"sentences).\" \n[36] \"Many\"         \"modern\"       \"that\"         \"deal\"         \"principles\"  \n[41] \"grammar\"      \"are\"          \"based\"        \"on\"           \"Noam\"        \n[46] \"framework\"    \"generative\"   \"linguistics.\"\n```\n\n\n:::\n:::\n\n\n\nShow all words in the split example text that begin with a lower case `a`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset[str_detect(set, \"^a\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\"     \"and\"   \"a\"     \"apply\" \"as\"    \"as\"    \"and\"   \"as\"    \"and\"  \n[10] \"and\"   \"and\"   \"and\"   \"are\"  \n```\n\n\n:::\n:::\n\n\n\nShow all words in the split example text that end in a lower case `s`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset[str_detect(set, \"s$\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"is\"         \"rules\"      \"governs\"    \"utterances\" \"rules\"     \n [6] \"as\"         \"as\"         \"subsets\"    \"as\"         \"phrases\"   \n[11] \"theories\"   \"principles\" \"Chomsky's\" \n```\n\n\n:::\n:::\n\n\n\nShow all words in the split example text in which there is an `e`, then any other character, and than another `n`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset[str_detect(set, \"e.n\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"governs\"  \"meaning,\" \"modern\"  \n```\n\n\n:::\n:::\n\n\n\nShow all words in the split example text in which there is an `e`, then two other characters, and than another `n`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset[str_detect(set, \"e.{2,2}n\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"utterances\"\n```\n\n\n:::\n:::\n\n\n\nShow all words that consist of exactly three alphabetical characters in the split example text.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset[str_detect(set, \"^[:alpha:]{3,3}$\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"the\" \"and\" \"use\" \"and\" \"and\" \"and\" \"and\" \"and\" \"the\" \"are\"\n```\n\n\n:::\n:::\n\n\n\nShow all words that consist of six or more alphabetical characters in the split example text.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset[str_detect(set, \"^[:alpha:]{6,}$\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Grammar\"      \"system\"       \"governs\"      \"production\"   \"utterances\"  \n [6] \"include\"      \"componential\" \"subsets\"      \"pertaining\"   \"phonology\"   \n[11] \"organisation\" \"phonetic\"     \"morphology\"   \"formation\"    \"composition\" \n[16] \"syntax\"       \"formation\"    \"composition\"  \"phrases\"      \"modern\"      \n[21] \"theories\"     \"principles\"   \"grammar\"      \"framework\"    \"generative\"  \n```\n\n\n:::\n:::\n\n\n\nReplace all lower case `a`s with upper case `E`s in the example text.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(et, \"a\", \"E\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"GrEmmEr is E system of rules which governs the production End use of utterEnces in E given lEnguEge. These rules Epply to sound Es well Es meEning, End include componentiEl subsets of rules, such Es those pertEining to phonology (the orgEnisEtion of phonetic sound systems), morphology (the formEtion End composition of words), End syntEx (the formEtion End composition of phrEses End sentences). MEny modern theories thEt deEl with the principles of grEmmEr Ere bEsed on NoEm Chomsky's frEmework of generEtive linguistics.\"\n```\n\n\n:::\n:::\n\n\n\nRemove all non-alphabetical characters in the split example text.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_remove_all(set, \"\\\\W\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Grammar\"      \"is\"           \"a\"            \"system\"       \"of\"          \n [6] \"rules\"        \"which\"        \"governs\"      \"the\"          \"production\"  \n[11] \"and\"          \"use\"          \"of\"           \"utterances\"   \"in\"          \n[16] \"a\"            \"given\"        \"language\"     \"These\"        \"rules\"       \n[21] \"apply\"        \"to\"           \"sound\"        \"as\"           \"well\"        \n[26] \"as\"           \"meaning\"      \"and\"          \"include\"      \"componential\"\n[31] \"subsets\"      \"of\"           \"rules\"        \"such\"         \"as\"          \n[36] \"those\"        \"pertaining\"   \"to\"           \"phonology\"    \"the\"         \n[41] \"organisation\" \"of\"           \"phonetic\"     \"sound\"        \"systems\"     \n[46] \"morphology\"   \"the\"          \"formation\"    \"and\"          \"composition\" \n[51] \"of\"           \"words\"        \"and\"          \"syntax\"       \"the\"         \n[56] \"formation\"    \"and\"          \"composition\"  \"of\"           \"phrases\"     \n[61] \"and\"          \"sentences\"    \"Many\"         \"modern\"       \"theories\"    \n[66] \"that\"         \"deal\"         \"with\"         \"the\"          \"principles\"  \n[71] \"of\"           \"grammar\"      \"are\"          \"based\"        \"on\"          \n[76] \"Noam\"         \"Chomskys\"     \"framework\"    \"of\"           \"generative\"  \n[81] \"linguistics\" \n```\n\n\n:::\n:::\n\n\n\nRemove all white spaces in the example text.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_remove_all(et, \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Grammarisasystemofruleswhichgovernstheproductionanduseofutterancesinagivenlanguage.Theserulesapplytosoundaswellasmeaning,andincludecomponentialsubsetsofrules,suchasthosepertainingtophonology(theorganisationofphoneticsoundsystems),morphology(theformationandcompositionofwords),andsyntax(theformationandcompositionofphrasesandsentences).ManymoderntheoriesthatdealwiththeprinciplesofgrammararebasedonNoamChomsky'sframeworkofgenerativelinguistics.\"\n```\n\n\n:::\n:::\n\n\n\n**Highlighting patterns**\n\nWe use the `str_view` and `str_view_all` functions to show the occurrences of regular expressions in the example text.\n\nTo begin with, we match an exactly defined pattern (`ang`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view_all(et, \"ang\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ Grammar is a system of rules which governs the production and use of utterances in a given l<ang>uage. These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\n```\n\n\n:::\n:::\n\n\n\nNow, we include . which stands for any symbol (except a new line symbol).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view_all(et, \".n.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ Grammar is a system of rules which gove<rns> the producti<on ><and> use of utter<anc>es <in >a giv<en >l<ang>uage. These rules apply to so<und> as well as me<ani>ng, <and> <inc>lude comp<one>ntial subsets of rules, such as those perta<ini>ng to ph<ono>logy (the org<ani>sati<on >of ph<one>tic so<und> systems), morphology (the formati<on ><and> compositi<on >of words), <and> s<ynt>ax (the formati<on ><and> compositi<on >of phrases <and> s<ent><enc>es). M<any> mode<rn >theories that deal with the pr<inc>iples of grammar are based <on >Noam Chomsky's framework of g<ene>rative l<ing>uistics.\n```\n\n\n:::\n:::\n\n\n\n\n***\n\n<div class=\"warning\" style='padding:0.1em; background-color:#51247a; color:#f2f2f2'>\n<span>\n<p style='margin-top:1em; text-align:center'>\n<b>EXERCISE TIME!</b></p>\n<p style='margin-left:1em;'>\n</p></span>\n</div>\n\n<div class=\"question\">` \n\n1. What regular expression can you use to extract all forms of *walk* from a text?\n\n<details>\n  <summary>Answer</summary>\n  `[Ww][Aa][Ll][Kk].*`\n</details>\n\nMore exercises will follow - bear with us ;)\n\n</div>\n\n***\n\n\n# Citation & Session Info {-}\n\nSchweinberger, Martin. 2022. *Regular Expressions in R*. Brisbane: The University of Queensland. url: https://ladal.edu.au/regex.html (Version 2022.11.17).\n\n```\n@manual{schweinberger2022regex,\n  author = {Schweinberger, Martin},\n  title = {Regular Expressions in R},\n  note = {https://ladal.edu.au/regex.html},\n  year = {2022},\n  organization = {The University of Queensland, School of Languages and Cultures},\n  address = {Brisbane},\n  edition = {2022.11.17}\n}\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Australia/Brisbane\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] flextable_0.9.7 lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n [5] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n [9] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.4              generics_0.1.3          fontLiberation_0.1.0   \n [4] xml2_1.3.6              stringi_1.8.4           hms_1.1.3              \n [7] digest_0.6.37           magrittr_2.0.3          evaluate_1.0.1         \n[10] grid_4.4.1              timechange_0.3.0        fastmap_1.2.0          \n[13] jsonlite_1.8.9          zip_2.3.1               fansi_1.0.6            \n[16] scales_1.3.0            fontBitstreamVera_0.1.1 klippy_0.0.0.9500      \n[19] textshaping_0.4.0       codetools_0.2-20        cli_3.6.3              \n[22] rlang_1.1.4             fontquiver_0.2.1        munsell_0.5.1          \n[25] withr_3.0.2             gdtools_0.4.0           tools_4.4.1            \n[28] officer_0.6.7           uuid_1.2-1              tzdb_0.4.0             \n[31] colorspace_2.1-1        assertthat_0.2.1        vctrs_0.6.5            \n[34] R6_2.5.1                lifecycle_1.0.4         htmlwidgets_1.6.4      \n[37] ragg_1.3.3              pkgconfig_2.0.3         pillar_1.9.0           \n[40] gtable_0.3.6            glue_1.8.0              data.table_1.16.2      \n[43] Rcpp_1.0.13             systemfonts_1.1.0       xfun_0.49              \n[46] tidyselect_1.2.1        knitr_1.48              htmltools_0.5.8.1      \n[49] rmarkdown_2.28          compiler_4.4.1          askpass_1.2.1          \n[52] openssl_2.2.2          \n```\n\n\n:::\n:::\n\n\n\n\n***\n\n[Back to top](#introduction)\n\n[Back to LADAL home](https://ladal.edu.au)\n\n***\n\n# References {-}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/clipboard-1.7.1/clipboard.min.js\"></script>\n<link href=\"../../site_libs/primer-tooltips-1.4.0/build.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/klippy-0.0.0.9500/css/klippy.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/klippy-0.0.0.9500/js/klippy.min.js\"></script>\n<link href=\"../../site_libs/tabwid-1.1.3/tabwid.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/tabwid-1.1.3/tabwid.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}