{
  "hash": "d9163b8d83b29b9431c7572e4df24b33",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Loading, saving, and generating data in R\"\nauthor: \"Martin Schweinberger\"\n---\n\n\n\n![](/images/uq1.jpg){ width=100% }\n\n# Introduction{-}\n\nThe data we work with comes in many formats and types. Therefore, this tutorial shows how you can load and save different types of data when working with R and we will have a brief look at how to generate data in R.\n\n![](/images/gy_chili.png){ width=15% style=\"float:right; padding:10px\" }\n\n\nThis tutorial is aimed at beginners  with the aim of showcasing how to load and save different type of data and data structures in R. The aim is not to provide a fully-fledged analysis but rather to show and exemplify how to load and save the most common types of data in R. \n\n\n<div class=\"warning\" style='padding:0.1em; background-color:#f2f2f2; color:#51247a'>\n<span>\n<p style='margin-top:1em; text-align:center'>\nTo be able to follow this tutorial, we suggest you check out and familiarize yourself with the content of the following **R Basics** tutorials:<br>\n</p>\n<p style='margin-top:1em; text-align:left'>\n<ul>\n  <li>[Getting started with R](https://ladal.edu.au/intror.html) </li>\n</ul>\n</p>\n<p style='margin-top:1em; text-align:center'>\nClick [**here**](https://ladal.edu.au/content/load.Rmd)^[If you want to render the R Notebook on your machine, i.e. knitting the document to html or a pdf, you need to make sure that you have R and RStudio installed and you also need to download the [**bibliography file**](https://slcladal.github.io/content/bibliography.bib) and store it in the same folder where you store the Rmd file.] to download the **entire R Notebook** for this tutorial.<br>\n</p>\n</span>\n</div>\n\n<br>\n\n\n## Preparation and session set up{-}\n\nThis tutorial is based on R. If you have not installed R or are new to it, you will find an introduction to and more information how to use R [here](https://slcladal.github.io/intror.html). For this tutorials, we need to install certain *packages* from an R *library* so that the scripts shown below are executed without errors. Before turning to the code below, please install the packages by running the code below this paragraph. If you have already installed the packages mentioned below, then you can skip ahead ignore this section. To install the necessary packages, simply run the following code - it may take some time (between 1 and 5 minutes to install all of the packages so you do not need to worry if it takes some time).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install packages\ninstall.packages(\"xlsx\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"stringr\")\ninstall.packages(\"tidyr\")\ninstall.packages(\"flextable\")\ninstall.packages(\"openxlsx\")\ninstall.packages(\"here\")\ninstall.packages(\"faux\")\ninstall.packages(\"data.tree\")\n# install klippy for copy-to-clipboard button in code chunks\nremotes::install_github(\"rlesur/klippy\")\n```\n:::\n\n\n\nNow that we have installed the packages, we can activate them as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(flextable)\nlibrary(xlsx)\nlibrary(openxlsx)\nlibrary(here)\nlibrary(data.tree)\n# activate klippy for copy-to-clipboard button\nklippy::klippy()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<script>\n  addClassKlippyTo(\"pre.r, pre.markdown\");\n  addKlippy('left', 'top', 'auto', '1', 'Copy code', 'Copied!');\n</script>\n```\n\n:::\n:::\n\n\n\nOnce you have installed RStudio and initiated the session by executing the code shown above, you are good to go.\n\n\n***\n\n<div class=\"warning\" style='padding:0.1em; background-color:#51247a; color:#f2f2f2'>\n<span>\n<p style='margin-top:1em; text-align:center'>\n<b>NOTE</b><br><br>\nThis tutorial assumes that you will be loading data from your own computer, as is often the case.  \n<br>\nThis tutorial assumes that you have a designated subfolder named `data` within the directory where your R project (the Rproj file) is located. It is assumed that your data sets are stored in this data subfolder. Additionally, we provide guidance on how to load multiple text files into R, a common scenario when working with corpora. These multiple texts are expected to be situated within a folder named `textcorpus`, which is located within the data subfolder.  \n<br>\nIf you have a different setup, you will need to adjust the path to the data in order for the tutorial to function correctly on your own computer. It is worth mentioning that the `here` function is utilized to create paths that originate from the directory where the Rproj is located.</p>\n<p style='margin-left:1em;'>\n</p></span>\n</div>\n\n***\n\nIn other words, your directory should have the structure as shown below.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n                       levelName\n1  myproject                    \n2   ¦--Rproj                    \n3   ¦--load.Rmd                 \n4   °--data                     \n5       ¦--testdat.csv          \n6       ¦--testdat2.csv         \n7       ¦--testdat.xlsx         \n8       ¦--testdat.txt          \n9       ¦--testdat.rda          \n10      ¦--english.rda          \n11      °--testcorpus           \n12          ¦--linguistics01.txt\n13          ¦--linguistics02.txt\n14          ¦--linguistics03.txt\n15          ¦--linguistics04.txt\n16          ¦--linguistics05.txt\n17          ¦--linguistics06.txt\n18          °--linguistics07.txt\n```\n\n\n:::\n:::\n\n\n\n\n\nThe data used in this tutorial can be downloaded using the links below:\n\n* [testdat.csv](https://slcladal.github.io/data/testdat.csv)\n* [testdat2.csv](https://slcladal.github.io/data/testdat2.csv)\n* [testdat.xlsx](https://slcladal.github.io/data/testdat.xlsx)\n* [testdat.txt](https://slcladal.github.io/data/testdat.txt)\n* [testdat.rda](https://slcladal.github.io/data/testdat.rda)\n* [english.txt](https://slcladal.github.io/data/english.txt)\n  * [linguistics01.txt](https://slcladal.github.io/data/testcorpus/linguistics01.txt)\n  * [linguistics02.txt](https://slcladal.github.io/data/testcorpus/linguistics02.txt)\n  * [linguistics03.txt](https://slcladal.github.io/data/testcorpus/linguistics03.txt)\n  * [linguistics04.txt](https://slcladal.github.io/data/testcorpus/linguistics04.txt)\n  * [linguistics05.txt](https://slcladal.github.io/data/testcorpus/linguistics05.txt)\n  * [linguistics06.txt](https://slcladal.github.io/data/testcorpus/linguistics06.txt)\n  * [linguistics07.txt](https://slcladal.github.io/data/testcorpus/linguistics07.txt)\n\n# Tabulated data {-}\n\n\nIn R, there are multiple functions available for reading comma-separated (csv) and other Excel files. Once we cover these functions, we will briefly explore the process of generating data from scratch, without relying on loading pre-existing data files.\n\n\n\n## CSV {-} \n\nA common data type when working with tabulated data are comma separated files (csv). To load such files, we can use the `read.csv` function as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load csv file\ndatcsv <- read.csv(here::here(\"data\", \"testdat.csv\"),\n    # indicate the data has column names\n    header = TRUE\n)\n# inspect first 6 rows using the head() function\nhead(datcsv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Variable1 Variable2\n1         6        67\n2        65        16\n3        12        56\n4        56        34\n5        45        54\n6        84        42\n```\n\n\n:::\n:::\n\n\n\nThe data is not spectacular and consist of a table with 2 columns (`Variable1`, and `Variable2`).\n\nSometimes, csv files are actually not comma-separated but use a semi-colon as a separator. In such cases, we can use the `read.delim` function to load the csv and specify that the separator (`sep`) is \";\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load csv with ; as the separator\ndatcsv2 <- read.delim(here::here(\"data\", \"testdat2.csv\"),\n    # define separator\n    sep = \";\",\n    # indicate the the data has column names\n    header = TRUE\n)\n# inspect data\nhead(datcsv2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Variable1 Variable2\n1         6        67\n2        65        16\n3        12        56\n4        56        34\n5        45        54\n6        84        42\n```\n\n\n:::\n:::\n\n\n\nTo save a data set as a csv on your computer (here it is saved within the `data` folder within the folder where the Rproj is located).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# save data as a csv without row names\nwrite.csv(datcsv, here::here(\"data\", \"testdat.csv\"), row.names = F)\n```\n:::\n\n\n\n\n## XLSX {-}\n\nTo load excel data, you can use the `read.xlsx` function from the `openxlsx` package. We have activated the `openxlsx` package in the session preparation so we do not need to activate it again here. If you get an error message telling you that R did not find the `read.xlsx` function, you need to activate the `openxlsx` package by running the `library(openxlsx)`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load data\ndatxlsx <- openxlsx::read.xlsx(\n    # define path where data is stored\n    here::here(\"data\", \"testdat.xlsx\"),\n    # define spreadsheet to load\n    sheet = 1\n)\n# inspect first 6 rows using the head() function\nhead(datxlsx)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Variable1 Variable2\n1         6        67\n2        65        16\n3        12        56\n4        56        34\n5        45        54\n6        84        42\n```\n\n\n:::\n:::\n\n\n\nTo save xlsx files, we can use the `write.xlsx` from the `openxlsx` package as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.xlsx(\n    # define object to be stored\n    datxlsx,\n    # define path where data should be stored\n    here::here(\"data\", \"testdat.xlsx\")\n)\n```\n:::\n\n\n\n## TXT (tabulated) {-}\n\nIf  the data is tabular and stored as a txt-file, there are various functions to read in the data. The most common functions are `read.delim` and `read.table`. The read.delim function is very flexible and allows you to specify the separator and inform R that the first row contains column headers rather than data points (if the data does not contain column headers, then you do not need to specify `header = T` because `header = F` is the default).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load tab txt 1\ndattxt <- read.delim(here::here(\"data\", \"testdat.txt\"),\n    sep = \"\\t\", header = TRUE\n)\n# inspect data\nhead(dattxt)\n```\n:::\n\n\n\nThe `read.table` function is very similar and can also be used to load various types of tabulated data. Again, we let R know that the first row contains column headers rather than data points.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load tab txt\ndattxt2 <- read.table(here::here(\"data\", \"testdat.txt\"), header = TRUE)\n# inspect\nhead(dattxt2)\n```\n:::\n\n\n\n\nTo save tabulated txt files, we use the `write.table` function. In the  `write.table` function we define the separator (in this case we write a tab-separated file) and inform R to not add row names (i.e, that R should not number rows and store this information in a separate column).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# save txt\nwrite.table(dattxt, here::here(\"data\", \"testdat.txt\"), sep = \"\\t\", row.names = F)\n```\n:::\n\n\n\n\n# Unstructured data {-}\n\n## TXT {-}\n\nUnstructured data (most commonly data representing raw text) is also very common - particularly when working with corpus data.\n\nTo load text data into R (here in the form of a txt file), we can use the `scan` function. Reading in texts using the `scan` function will result in loading vectors of stings where each string represents a separate word.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntesttxt <- scan(here::here(\"data\", \"english.txt\"), what = \"char\")\n# inspect\ntesttxt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Linguistics\" \"is\"          \"the\"         \"scientific\"  \"study\"      \n [6] \"of\"          \"language\"    \"and\"         \"it\"          \"involves\"   \n[11] \"the\"         \"analysis\"    \"of\"          \"language\"    \"form,\"      \n[16] \"language\"    \"meaning,\"    \"and\"         \"language\"    \"in\"         \n[21] \"context.\"   \n```\n\n\n:::\n:::\n\n\n\nIn contract, the `readLines` function will read in complete lines  and result in a vector of strings representing lines (if the entire text is in 1 line, the the entire text will be loaded as a single string).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntesttxt2 <- readLines(here::here(\"data\", \"english.txt\"))\n# inspect\ntesttxt2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Linguistics is the scientific study of language and it involves the analysis of language form, language meaning, and language in context. \"\n```\n\n\n:::\n:::\n\n\n\nTo save text data, we can use the `writeLines` function as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteLines(text2, here::here(\"data\", \"english.txt\"))\n```\n:::\n\n\n\n## Multiple TXTs {-}\n\nWhen dealing with text data, it is quite common to encounter scenarios where we need to load multiple files containing texts. In such cases, we typically begin by storing the file locations in an object (referred to as `fls` in this context) and then proceed to load the files using the `sapply` function, which allows for looping. Within the `sapply` function, we have the option to utilize either `scan` or `writeLines` for reading the text. In the example below, we employ `scan` and subsequently merge the individual elements into a single text using the `paste` function. The output demonstrates the successful loading of 7 txt files from the `testcorpus` located within the `data` folder.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract file paths\nfls <- list.files(here::here(\"data\", \"testcorpus\"), pattern = \"txt\", full.names = T)\n# load files\ntxts <- sapply(fls, function(x) {\n    x <- scan(x, what = \"char\") %>%\n        paste0(collapse = \" \")\n})\n# inspect\nstr(txts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Named chr [1:7] \"Linguistics is the scientific study of language. It involves analysing language form language meaning and langu\"| __truncated__ ...\n - attr(*, \"names\")= chr [1:7] \"/Users/laurenceanthony/Documents/projects/SLCLADAL.github.io/htdocs/quarto_website/tutorials/load/data/testcorp\"| __truncated__ \"/Users/laurenceanthony/Documents/projects/SLCLADAL.github.io/htdocs/quarto_website/tutorials/load/data/testcorp\"| __truncated__ \"/Users/laurenceanthony/Documents/projects/SLCLADAL.github.io/htdocs/quarto_website/tutorials/load/data/testcorp\"| __truncated__ \"/Users/laurenceanthony/Documents/projects/SLCLADAL.github.io/htdocs/quarto_website/tutorials/load/data/testcorp\"| __truncated__ ...\n```\n\n\n:::\n:::\n\n\n\nTo save multiple txt files, we follow a similar procedure and first determine the paths that define where R will store the files and then loop over the files and store them in the `testcorpus` folder.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define where to save each file\nouts <- file.path(paste(here::here(), \"/\", \"data/testcorpus\", \"/\", \"text\", 1:7, \".txt\", sep = \"\"))\n# save the files\nlapply(seq_along(txts), function(i) {\n    writeLines(txts[[i]],\n        con = outs[i]\n    )\n})\n```\n:::\n\n\n\n\n# R data objects {-}\n\nWhen working withR in RStudio, it makes sense to save data as R data objects as this requires minimal storage space and allows to load and save data very quickly. R data objects can have any format (structured, unstructured, lists, etc.). Here, we use the `readRDS` function to load R data objects (which can represent any form or type of data). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load data\nrdadat <- readRDS(here::here(\"data\", \"testdat.rda\"))\n# inspect\nhead(rdadat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Variable1 Variable2\n1         6        67\n2        65        16\n3        12        56\n4        56        34\n5        45        54\n6        84        42\n```\n\n\n:::\n:::\n\n\n\nTo save R data objects, we use the `saveRDS` function as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(rdadat, file = here::here(\"data\", \"testdat.rda\"))\n```\n:::\n\n\n\n\n# Web data {-}\n\nYou can load all types of data discussed above from the web. the only thing you need to do is to change the path. Instead of defining a path on your own computer, simply replace it with a url with thin the `url` function nd the additional argument `\"rb\"`.\n\nSo loading the `testdat.rda` from the LADAL github data repo would require the following path specification:\n\n`url(\"https://slcladal.github.io/data/testdat.rda\", \"rb\")`\n\ncompared to the data repo in the current Rproj:\n\n`here::here(\"data\", \"testdat.rda\")`\n\n\nSee below how you can load, e.g., an `rda` object from the LADAL data repo on GitHub.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwebdat <- base::readRDS(url(\"https://slcladal.github.io/data/testdat.rda\", \"rb\"))\n# inspect\nhead(webdat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Variable1 Variable2\n1         6        67\n2        65        16\n3        12        56\n4        56        34\n5        45        54\n6        84        42\n```\n\n\n:::\n:::\n\n\n\n\nWe can then store this data as shown in the sections above.\n\n\n\n# Generating data {-}\n\nIn this section, we will briefly have a look at how to generate data in R.\n\n## Creating tabular data {-}\n\nTo create a simple data frame, we can simply generate the columns and then bind them together using the `data.frame` function as shown below. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a data frame from scratch\nage <- c(25, 30, 56)\ngender <- c(\"male\", \"female\", \"male\")\nl1 <- c(\"english\", \"german\", \"english\")\nmydat <- data.frame(age, gender, l1)\n# inspect\nhead(mydat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age gender      l1\n1  25   male english\n2  30 female  german\n3  56   male english\n```\n\n\n:::\n:::\n\n\n\nYou can also generate more complex data sets where columns or variables correlate with each other. Below, we will generate a data set with 4 correlated variables: *Proficiency* (the proficiency of a speaker), *Abroad* (whether or not subjects have been abroad), *University* (if they went to a standard or excellent university), and *PluralError* (if they produced a number marking error in a test sentence).\n\nWe start by setting seed so the generated data will be the same each time we generate the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(678)\n```\n:::\n\n\n\nNext, we create a correlation matrix, Here, we will create 4 variables and for each of these variables we have to determine  how strongly each variable should be correlated with each other variable. The diagonal values are 1 as each variable correlates perfectly with itself.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncmat <- c(\n    1.00, 0.05, 0.05, -0.5,\n    0.05, 1.00, 0.05, -0.3,\n    0.05, 0.05, 1.00, -0.1,\n    -0.50, -0.30, -0.10, 1.0\n)\n```\n:::\n\n\n\nNext, we generate the data using the `rnorm_multi` function. In this function, we need to specify:\n\n* how many data points the data set should consist of (`n`)  \n* the number of variables (`vars`)  \n* the means (`mu`)  \n* the standard deviation (`sd`)  \n* the correlations (here we specify the correlation matrix we defined above)  \n* the names of the variables (`varnames`).  \n\nIf all variables should have the same mean, then we only need to provide a singe value but we need to provide 4 values, if we want the variables to have different means).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- faux::rnorm_multi(\n    n = 400, vars = 4, mu = 1, sd = 1, cmat,\n    varnames = c(\"Proficiency\", \"Abroad\", \"University\", \"PluralError\")\n)\n# inspect\nhead(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Proficiency    Abroad University PluralError\n1   1.9374602 1.5593635  1.2234356   0.7427049\n2  -0.6465982 1.3792828  1.6469481   1.7141511\n3   0.4280436 0.7467852  0.7790628   1.1734548\n4   1.3360640 3.5875551  0.3079962   0.5445548\n5   2.8670503 2.1240673  0.4753890  -0.9205674\n6   0.4730098 1.0867764  0.7660182  -0.8112105\n```\n\n\n:::\n:::\n\n\n\nIf you want to generate numeric data, then this would be all you need to do. If you want to generate categorical variables, however, we need to convert these numeric values into factors. In the example below, we convert all values higher than 1 (the mean) into one level, and all other values into a second level. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# modify data\ndat <- dat %>%\n    dplyr::mutate(\n        Proficiency = ifelse(Proficiency > 1, \"Advanced\", \"Intermediate\"),\n        Abroad = ifelse(Abroad > 1, \"Abroad\", \"Home\"),\n        University = ifelse(University > 1, \"Excellent\", \"Standard\"),\n        PluralError = ifelse(PluralError > 1, \"Error\", \"Correct\")\n    )\n# inspect\nhead(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Proficiency Abroad University PluralError\n1     Advanced Abroad  Excellent     Correct\n2 Intermediate Abroad  Excellent       Error\n3 Intermediate   Home   Standard       Error\n4     Advanced Abroad   Standard     Correct\n5     Advanced Abroad   Standard     Correct\n6 Intermediate Abroad   Standard     Correct\n```\n\n\n:::\n:::\n\n\n\n\nAnd again, we could then save this data on our computer as shown in the sections above. For instance, we could save it as an MS Excel file as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.xlsx(dat, here::here(\"data\", \"dat.xlsx\"))\n```\n:::\n\n\n\n## Creating text data {-}\n\nYou may also want to create textual data (e.g., to create sample sentences or short test texts). Thus, we will briefly focus on how to create textual data in R.\n\nThe easiest way to generate text data is to simply create strings and combine them as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext <- c(\"This is an example sentence.\", \"This is a second example sentence\")\n# inspect\ntext\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"This is an example sentence.\"      \"This is a second example sentence\"\n```\n\n\n:::\n:::\n\n\n\n\nIf you need to generate many sentences that have a standard format, you can make use of the paste function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum <- 1:4\nstart <- \"This is sentence number \"\nend <- \".\"\ntexts <- paste(start, num, end, sep = \"\")\n# inspect\ntexts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"This is sentence number 1.\" \"This is sentence number 2.\"\n[3] \"This is sentence number 3.\" \"This is sentence number 4.\"\n```\n\n\n:::\n:::\n\n\n\nOr, you can combine these text snippets into a single string.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonetext <- paste(start, num, end, sep = \"\", collapse = \" \")\n# inspect\nonetext\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"This is sentence number 1. This is sentence number 2. This is sentence number 3. This is sentence number 4.\"\n```\n\n\n:::\n:::\n\n\n\nThe text can then be saved using the `writeLines` function as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteLines(onetext, here::here(\"data\", \"onetext.txt\"))\n```\n:::\n\n\n\nThis is all for this tutorial. We hope it is useful and that you have a better idea about how to load, save and generate data now.\n\n# Citation & Session Info {-}\n\nSchweinberger, Martin. 2022. *Loading, saving, and generating data in R*. Brisbane: The University of Queensland. URL: https://ladal.edu.au/load.html (Version 2022.11.08).\n\n\n```\n@manual{schweinberger2022loadr,\n  author = {Schweinberger, Martin},\n  title = {Loading, saving, and generating data in R},\n  note = {https://ladal.edu.au/load.html},\n  year = {2022},\n  organization = \"The University of Queensland, School of Languages and Cultures},\n  address = {Brisbane},\n  edition = {2022.11.08}\n}\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Australia/Brisbane\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] data.tree_1.1.0  here_1.0.1       openxlsx_4.2.7.1 xlsx_0.6.5      \n[5] flextable_0.9.7  tidyr_1.3.1      stringr_1.5.1    dplyr_1.1.4     \n\nloaded via a namespace (and not attached):\n [1] xlsxjars_0.6.1          utf8_1.2.4              generics_0.1.3         \n [4] fontLiberation_0.1.0    xml2_1.3.6              stringi_1.8.4          \n [7] digest_0.6.37           magrittr_2.0.3          evaluate_1.0.1         \n[10] grid_4.4.1              fastmap_1.2.0           rprojroot_2.0.4        \n[13] jsonlite_1.8.9          zip_2.3.1               purrr_1.0.2            \n[16] fansi_1.0.6             scales_1.3.0            fontBitstreamVera_0.1.1\n[19] codetools_0.2-20        textshaping_0.4.0       cli_3.6.3              \n[22] faux_1.2.1              rlang_1.1.4             fontquiver_0.2.1       \n[25] munsell_0.5.1           gdtools_0.4.0           tools_4.4.1            \n[28] officer_0.6.7           uuid_1.2-1              colorspace_2.1-1       \n[31] ggplot2_3.5.1           vctrs_0.6.5             R6_2.5.1               \n[34] lifecycle_1.0.4         htmlwidgets_1.6.4       ragg_1.3.3             \n[37] pkgconfig_2.0.3         gtable_0.3.6            rJava_1.0-11           \n[40] pillar_1.9.0            data.table_1.16.2       glue_1.8.0             \n[43] Rcpp_1.0.13             systemfonts_1.1.0       xfun_0.49              \n[46] tibble_3.2.1            tidyselect_1.2.1        rstudioapi_0.17.1      \n[49] knitr_1.48              htmltools_0.5.8.1       rmarkdown_2.28         \n[52] compiler_4.4.1          askpass_1.2.1           openssl_2.2.2          \n```\n\n\n:::\n:::\n\n\n\n\n***\n\n[Back to top](#introduction)\n\n[Back to HOME](https://ladal.edu.au)\n\n***\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/clipboard-1.7.1/clipboard.min.js\"></script>\n<link href=\"../../site_libs/primer-tooltips-1.4.0/build.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/klippy-0.0.0.9500/css/klippy.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/klippy-0.0.0.9500/js/klippy.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}